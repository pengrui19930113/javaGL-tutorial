#version 330

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

layout (location = 0)out vec4 fragmentOutColour;
layout (location = 1)out vec4 fragmentOutColour2;

uniform sampler2D texSampler;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;
uniform vec3 attenuation;

void main(void){
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	float nDotl = dot(unitNormal,unitLightVector);
	float brightness = max(nDotl,0.0);
	float distance = length(toLightVector);
	float attFactor = attenuation.x+attenuation.y*distance+attenuation.z*distance*distance;
	vec3 diffuse = brightness * lightColour/attFactor;
	
	vec3 unitToCameraVector = normalize(toCameraVector);
	vec3 lightDirection = - unitLightVector; // light to fragment
	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
	
	float specularFactor = dot(reflectedLightDirection,unitToCameraVector);
	specularFactor = max(specularFactor,0);
	float dampedFactor = pow(specularFactor,shineDamper);
	vec3 finalSpecular = dampedFactor * (reflectivity*lightColour)/attFactor;
	
	vec4 textureColour = texture(texSampler,pass_textureCoords);
	if(textureColour.a<0.5){
		discard;
	}
	fragmentOutColour = textureColour*vec4(diffuse,1.0)
		+ vec4(finalSpecular,1.0)
		;
	fragmentOutColour = mix(vec4(skyColour,1.0),fragmentOutColour,visibility);
	fragmentOutColour2 = fragmentOutColour + textureColour;
	//fragmentOutColour = vec4(1,0,0,1);
}
