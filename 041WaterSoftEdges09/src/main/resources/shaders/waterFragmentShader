#version 330

in vec4 clipSpace;
in vec2 textureCoords;
in vec3 toCameraVector;
in vec3 fromLightVector;

out vec4 outputColor;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D dudvMap;
uniform float moveFactor;
uniform vec3 lightColour;
uniform sampler2D normalMap;
uniform sampler2D depthMap;

const float waveStrength = 0.01;
const float shineDamper = 20;
const float reflectivity = 0.6;


void main(void){
	
	vec2 ndc = clipSpace.xy/clipSpace.w; // [-1,1][-1,1]
	ndc = ndc/2.0+0.5; // [-1,1][-1,1] to [0,1][0,1]
	vec2 refractTexCoords = vec2(ndc.x,ndc.y);
	vec2 reflectTexCoords = vec2(ndc.x,1-ndc.y);
	
	// the value define in MatrixUtil ï¼Œ that shader variable can be use uniform to transform
	float near = 0.1;
	float far = 1000.;
	
	float depth = texture(depthMap,refractTexCoords).r;
	float floorDistance = 2.0*near*far/(far+near-(2.0*depth-1.0)*(far-near));
	depth = gl_FragCoord.z;
	float waterDistance = 2.0*near*far/(far+near-(2.0*depth-1.0)*(far-near));
	float waterDepth = floorDistance - waterDistance;
	
	vec2 distortedTexCoords = texture(dudvMap,vec2(textureCoords.x+moveFactor,textureCoords.y)).rg*0.1;
	distortedTexCoords = textureCoords + vec2(distortedTexCoords.x,distortedTexCoords.y+moveFactor);
	vec2 totalDistortion = (texture(dudvMap,distortedTexCoords).rg*2-1)*waveStrength;
	// fix the water edge glitches
	totalDistortion *= clamp(waterDepth/5,0.0,1.0);
	
	refractTexCoords += totalDistortion;
	refractTexCoords = clamp(refractTexCoords,0.001,0.999);
	
	reflectTexCoords += totalDistortion;
	reflectTexCoords = clamp(reflectTexCoords,0.001,0.999);
	
	vec4 reflectColour = texture(reflectionTexture,reflectTexCoords);
	vec4 refractColour = texture(refractionTexture,refractTexCoords);
	
	vec3 viewVector = normalize(toCameraVector);
	float refractionFactor = dot(viewVector,vec3(0,1,0));
	refractionFactor = pow(refractionFactor,3.0);
	
	vec4 normalMapColour = texture(normalMap, distortedTexCoords);
//	vec3 normal = vec3(normalMapColour.r*2-1,normalMapColour.b,normalMapColour.g*2-1);
	vec3 normal = vec3(normalMapColour.r*2-1,normalMapColour.b*2,normalMapColour.g*2-1);
	normal = normalize(normal);
	
	vec3 reflectedLight = reflect(normalize(fromLightVector),normal);
	float specular = max(dot(reflectedLight,viewVector),0);
	specular = pow(specular,shineDamper);
	vec3 specularHightLights = lightColour*specular*reflectivity;
	//specularHightLights *= clamp(waterDepth/5,0.0,1.0);// depth more less , specular more less;
	
	outputColor = mix(reflectColour,refractColour,refractionFactor);
	outputColor = vec4(specularHightLights,0)+mix(outputColor,vec4(0,0.3,0.5,1),0.2); //mix sky/water color
	outputColor.a = clamp(waterDepth/2,0.0,1.0);
}
