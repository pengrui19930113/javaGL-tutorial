#version 330

in vec2 pass_textureCoords;
in vec3 toLightVector;
in vec3 toCameraVector;
//in vec3 pass_tangent;

out vec4 fragmentOutColour;

uniform float shineDamper;
uniform float reflectivity;
uniform vec3 lightColour;
uniform sampler2D modelTexture;
uniform sampler2D normalTexture;

void main(void){
	vec4 normalMapValue = 2.0*texture(normalTexture,pass_textureCoords)-1.0;
	vec3 unitNormal = normalize(normalMapValue.rgb);
	vec3 unitToCameraVector = normalize(toCameraVector);// tangent space
	vec3 unitLightVector = normalize(toLightVector);//tangent space
	
	const float ambient = 0.2;
	float nDotl = dot(unitNormal,unitLightVector);
	float brightness = max(nDotl,0.0);
	vec3 diffuse =max(brightness * lightColour,ambient);
	
	vec3 lightDirection = - unitLightVector; // light to fragment
	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
	float specularFactor = dot(reflectedLightDirection,unitToCameraVector);
	specularFactor = max(specularFactor,0);
	float dampedFactor = pow(specularFactor,shineDamper);
	vec3 specular = dampedFactor * (reflectivity*lightColour);
	
	vec4 textureColour = texture(modelTexture,pass_textureCoords);
	fragmentOutColour = textureColour*vec4(diffuse,1.0) + vec4(specular,1.0);
	//fragmentOutColour = vec4(pass_tangent,1);//just test
}