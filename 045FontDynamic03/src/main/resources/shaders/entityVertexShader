#version 330

in vec3 position;
in vec2 textureCoords;
in vec3 normal;

out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector;
out vec3 toCameraVector;
out float visibility;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 transformationMatrix;
uniform vec3 lightPosition;
uniform float useFakeLighting;
uniform float numberOfRows;
uniform vec2 offset;


const float density = 0.03; // fog varaible , that can be use uniform to modify value by main loop event;
const float gradient = 1.5; // fog varaible

void main(void){

	vec4 worldPosition = transformationMatrix*vec4(position.xyz,1.);
	vec4 positionRelativeToCam = viewMatrix*worldPosition; //fragment position of camera space 
	gl_Position = projectionMatrix*positionRelativeToCam;
	
	vec3 actualNormal = normal;
	if(useFakeLighting>0.5){
		actualNormal = vec3(0.0,1.0,0.0);
	}
	surfaceNormal = mat3(transpose(inverse(transformationMatrix)))*actualNormal;
	pass_textureCoords = (textureCoords/numberOfRows)+offset;//use atlas
	toLightVector = lightPosition - worldPosition.xyz;
	
	vec4 cameraPosition = inverse(viewMatrix)*vec4(0,0,0,1);
	toCameraVector = cameraPosition.xyz - worldPosition.xyz;
	
	float distance = length(positionRelativeToCam.xyz);
	visibility = exp(-pow(distance*density,gradient));
	visibility = clamp(visibility,0.0,1.0);
}